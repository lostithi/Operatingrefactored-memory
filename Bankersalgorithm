#include <stdio.h>
int main(){
    int n,m,i,j,k,alloc[20][20],max[20][20],available[20];
    int f[20],ans[20],ind=0,need[20][20];
    printf("Enter number of processes: ");
    scanf("%d",&n);
    printf("Enter number of resources: ");
    scanf("%d",&m);
    //Allocating to matrix
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("Enter the values at position (%d %d): ",i+1,j+1);
            scanf("%d",&alloc[i][j]);
        }
    }
    //Reading max
    printf("Enter the max values: \n");
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("Enter the values at position (%d %d): ",i+1,j+1);
            scanf("%d",&max[i][j]);
        }   
    }
    //Reading available    
    printf("Enter the Available values: \n");
    for(i=0;i<m;i++){//should be m-available resources
            printf("Enter the values at position (%d %d): ",i+1);
            scanf("%d",&available[i]);
        }   
    //f-finished array status--initialized as zero
    for(j=0;j<n;j++){//should be n-available processes
        f[j]=0;
    }
    //------------------------------------------------------------------
    //NEED MATRIX-need[i][j]=max[i][j]-allocation[i][j]
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    //------------------------------------------------------------------
    //Safe Sequence-ans[] is used
    int y=0;
    for(k=0;k<n;k++){
        for(i=0;i<n;i++){
            if(f[i]==0){
                int flag=0;
                for(j=0;j<m;j++){
                    if(need[i][j]>available[j]){
                        flag=1;//Means cannot be executed now
                        break;
                    }
                }
                if(flag==0){
                    ans[ind++]=i;
                    for(y=0;y<m;y++){
                        //updating availability
                        available[y] = available[y] + alloc[i][y];
                    }
                    f[i]=1;//Finished one is updated as so
                }
            }
        }
    }
    //Displaying Safe Sequence
    printf("SAFE SEQUENCE is: \n");
    for(i=0;i<n-1;i++){//to remove the last arrow
        printf("P%d ->",ans[i]);
    }printf("P%d ->",ans[n-1]);
    
}
